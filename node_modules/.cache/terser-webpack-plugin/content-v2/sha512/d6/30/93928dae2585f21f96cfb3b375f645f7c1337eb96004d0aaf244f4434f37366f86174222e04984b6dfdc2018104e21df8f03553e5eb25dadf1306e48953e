{"code":"!function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=0)}([function(e,t){!function(){\"use strict\";let e;self.onmessage=function(n){switch(n.data.command){case\"encode\":e&&e.record(n.data.buffers);break;case\"done\":e&&e.requestData();break;case\"init\":e=new t(n.data)}};var t=function(e){if(e=Object.assign({wavBitDepth:16},e),-1===[8,16,24,32].indexOf(e.wavBitDepth))throw new Error(\"Only 8, 16, 24 and 32 bits per sample are supported\");this.bitDepth=e.wavBitDepth,this.sampleRate=e.wavSampleRate,this.originalSampleRate=e.originalSampleRate,this.recordedBuffers=[],this.bytesPerSample=this.bitDepth/8};t.prototype.interleave=function(e){const t=e.length;this.originalSampleRate+=0,this.sampleRate+=0;let n=0;const r=this.originalSampleRate/this.sampleRate,s=Math.ceil(t*this.sampleRate/this.originalSampleRate),a=new Float32Array(s);for(let t=0;t<s;t++)a[t]=e[Math.floor(n)],n+=r;return a},t.prototype.record=function(e){e=this.interleave(e[0]),this.numberOfChannels=this.numberOfChannels||1;const t=e.length,n=new Uint8Array(t*this.numberOfChannels*this.bytesPerSample);for(let r=0;r<t;r++)for(let t=0;t<this.numberOfChannels;t++){const s=(r*this.numberOfChannels+t)*this.bytesPerSample;let a=Math.max(-1,Math.min(1,e[r]));switch(this.bytesPerSample){case 4:a=2147483647.5*a-.5,n[s]=a,n[s+1]=a>>8,n[s+2]=a>>16,n[s+3]=a>>24;break;case 3:a=8388607.5*a-.5,n[s]=a,n[s+1]=a>>8,n[s+2]=a>>16;break;case 2:a=32767.5*a-.5,n[s]=a,n[s+1]=a>>8;break;case 1:n[s]=127.5*(a+1);break;default:throw new Error(\"Only 8, 16, 24 and 32 bits per sample are supported\")}}self.postMessage({command:\"buffer\",buffer:n}),this.recordedBuffers.push(n)},t.prototype.requestData=function(){const e=this.recordedBuffers[0].length,t=this.recordedBuffers.length*e,n=new Uint8Array(44+t),r=new DataView(n.buffer);r.setUint32(0,1380533830,!1),r.setUint32(4,36+t,!0),r.setUint32(8,1463899717,!1),r.setUint32(12,1718449184,!1),r.setUint32(16,16,!0),r.setUint16(20,1,!0),r.setUint16(22,this.numberOfChannels,!0),r.setUint32(24,this.sampleRate,!0),r.setUint32(28,this.sampleRate*this.bytesPerSample*this.numberOfChannels,!0),r.setUint16(32,this.bytesPerSample*this.numberOfChannels,!0),r.setUint16(34,this.bitDepth,!0),r.setUint32(36,1684108385,!1),r.setUint32(40,t,!0);for(let t=0;t<this.recordedBuffers.length;t++)n.set(this.recordedBuffers[t],t*e+44);self.postMessage({command:\"wav\",data:n.buffer}),self.postMessage(null),self.close()}}()}]);","extractedComments":[]}